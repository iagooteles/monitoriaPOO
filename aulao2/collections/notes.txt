üß© 1. O que s√£o Collections em Java

Collections s√£o estruturas de dados din√¢micas que armazenam grupos de objetos.
Diferente de arrays, elas podem crescer ou diminuir dinamicamente, al√©m de oferecerem m√©todos prontos para:

    adicionar e remover elementos (add, remove)
    percorrer elementos (forEach, iterator)
    buscar, ordenar e filtrar elementos (contains, sort, stream)

O Java fornece isso atrav√©s do Java Collections Framework (JCF), que inclui interfaces, classes concretas e algoritmos.

Vantagens:
    Flexibilidade: se amanh√£ voc√™ quiser trocar para LinkedList, basta mudar a implementa√ß√£o:
        List<String> nomes = new LinkedList<>();
    O resto do c√≥digo continua funcionando sem mudan√ßas.
    Polimorfismo: voc√™ pode passar a lista para qualquer m√©todo que aceite List, independente da implementa√ß√£o concreta.
    Boas pr√°ticas de OO: programar contra interfaces, n√£o contra classes concretas.


Quando declarar como ArrayList diretamente?
        ArrayList<String> nomes = new ArrayList<>();
    S√≥ faz sentido se voc√™ precisar usar m√©todos espec√≠ficos do ArrayList que n√£o est√£o na interface List.
    Caso contr√°rio, sempre prefira interface (List) para manter flexibilidade e desacoplamento.

‚ÄúCada collection tem sua particularidade: algumas permitem duplicatas, outras n√£o; algumas mant√™m a ordem, outras n√£o; algumas s√£o mais r√°pidas para leitura, outras para inser√ß√£o.

Aaah iago, como vou saber qual collection usar na hora da prova?

Se ele sempre d√° exemplos com List, √© bem prov√°vel que ele espere que voc√™ use List nos exerc√≠cios.
O mais importante √© entender o comportamento de collection, o seu sentido e que eles possuim m√©todos espec√≠ficos para o agrupamento dos objetos.
